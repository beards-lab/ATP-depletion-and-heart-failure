%% generated by copilot. Not tested yet.

% Define the input and output directories
outputDir = '../data/PassiveCaSrc2/20241010_autorenamed';

% stays the same
inputDirPattern = '../data/PassiveCaSrc2/20241010_BeforeRenaming';
outputDirPattern = '../data/PassiveCaSrc2/20241010';



% Get a list of all files in both directories
filesBefore = dir(fullfile(inputDirPattern, '*'));
filesAfter = dir(fullfile(outputDirPattern, '*'));

% Remove directories from the file lists
filesBefore = filesBefore(~[filesBefore.isdir]);
filesAfter = filesAfter(~[filesAfter.isdir]);

% Calculate checksums for files before renaming
checksumsBefore = arrayfun(@(x) calculateChecksum(fullfile(inputDirPattern, x.name)), filesBefore);

% Calculate checksums for files after renaming
checksumsAfter = arrayfun(@(x) calculateChecksum(fullfile(outputDirPattern, x.name)), filesAfter);

% Map files by their checksums
fileMap = containers.Map('KeyType', 'double', 'ValueType', 'any');
for i = 1:length(checksumsAfter)
    fileMap(checksumsAfter(i)) = filesAfter(i).name;
end

% Rename files in the input directory based on their checksums
for i = 1:length(filesBefore)
    oldFilePath = fullfile(inputDirPattern, filesBefore(i).name);
    newFileName = fileMap(checksumsBefore(i));
    newFilePath = fullfile(outputDir, newFileName);
    
    % Rename the file
    copyfile(oldFilePath, newFilePath);
end



% Function to calculate the checksum of a file
function checksum = calculateChecksum(filePath)
    fid = fopen(filePath, 'rb');
    data = fread(fid, inf, '*uint8');
    fclose(fid);
    checksum = sum(data);
end

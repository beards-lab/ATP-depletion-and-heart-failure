%% generated by gpt-4o. Tested and functional.
dryRun = false;

% Define the folders - this is the input and output
nextFolder = '../data/PassiveCaSrc2/20241217_BeforeRenaming';
nextRenamedFolder = '../data/PassiveCaSrc2/20241217';

% this is the renaming key - keep those up
inputFolder = '../data/PassiveCaSrc2/20241010_BeforeRenaming';
renamedFolder = '../data/PassiveCaSrc2/20241010';

% Get the list of files in the input folders
inputFiles = dir(fullfile(inputFolder, '*'));
renamedFiles = dir(fullfile(renamedFolder, '*'));
nextFiles = dir(fullfile(nextFolder, '*'));

% Filter out directories (keep only files)
inputFiles = inputFiles(~[inputFiles.isdir]);
renamedFiles = renamedFiles(~[renamedFiles.isdir]);
nextFiles = nextFiles(~[nextFiles.isdir]);

% Create the nextFiles_renamed folder if it doesn't exist
if ~exist(nextRenamedFolder, 'dir')
    mkdir(nextRenamedFolder);
end

% Calculate checksums for inputFiles
inputChecksums = containers.Map();
for i = 1:length(inputFiles)
    filePath = fullfile(inputFolder, inputFiles(i).name);
    checksum = calculate_md5(filePath);
    inputChecksums(checksum) = inputFiles(i).name;
end

% Create a mapping from checksum to renamed file names
renameMap = containers.Map();
for i = 1:length(renamedFiles)
    filePath = fullfile(renamedFolder, renamedFiles(i).name);
    checksum = calculate_md5(filePath);
    if isKey(inputChecksums, checksum)
        originalName = inputChecksums(checksum);
        renameMap(originalName) = renamedFiles(i).name;
    else
        warning('Checksum %s for file %s in inputFiles_renamed does not match any file in inputFiles.', ...
            checksum, renamedFiles(i).name);
    end
end

%% Rename files in nextFiles according to the renaming pattern
for i = 1:length(nextFiles)
    filerename = nextFiles(i).name;
    % filePath = fullfile(nextFolder, nextFiles(i).name);
    % checksum = calculate_md5(filePath);
    if isKey(renameMap, filerename)
        newName = renameMap(filerename);
        % Copy and rename the file
        if exist(fullfile(nextRenamedFolder, newName), 'file')
            warning('File %s in nextFiles already there. Skipping', nextFiles(i).name);
        elseif ~dryRun
            movefile(fullfile(nextFolder, nextFiles(i).name), fullfile(nextRenamedFolder, newName));
            fprintf('%d: File %s > %s.. \n', i, nextFiles(i).name, newName);
        else
            fprintf('%d: (Test) File %s > %s.. \n', i, nextFiles(i).name, newName);
        end
    else
        warning('File %s in nextFiles does not have a corresponding renamed file.', nextFiles(i).name);
    end
end

disp('Files have been renamed successfully.');

function checksum = calculate_md5(filePath)
    % Calculate the MD5 checksum for a given file
    md5Hasher = java.security.MessageDigest.getInstance('MD5');
    fileID = fopen(filePath, 'r');
    data = fread(fileID, Inf, '*uint8');
    fclose(fileID);
    md5Hasher.update(data);
    checksumBytes = typecast(md5Hasher.digest(), 'uint8');
    checksum = dec2hex(checksumBytes)';
    checksum = lower(checksum(:)');
end